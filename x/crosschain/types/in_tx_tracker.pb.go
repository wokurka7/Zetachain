// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/zetacore/crosschain/in_tx_tracker.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	coin "github.com/zeta-chain/zetacore/pkg/coin"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InTxTracker struct {
	ChainId  int64         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash   string        `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	CoinType coin.CoinType `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=zetachain.zetacore.pkg.coin.CoinType" json:"coin_type,omitempty"`
}

func (m *InTxTracker) Reset()         { *m = InTxTracker{} }
func (m *InTxTracker) String() string { return proto.CompactTextString(m) }
func (*InTxTracker) ProtoMessage()    {}
func (*InTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_468bf08d03bc41c1, []int{0}
}
func (m *InTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InTxTracker.Merge(m, src)
}
func (m *InTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *InTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_InTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_InTxTracker proto.InternalMessageInfo

func (m *InTxTracker) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *InTxTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *InTxTracker) GetCoinType() coin.CoinType {
	if m != nil {
		return m.CoinType
	}
	return coin.CoinType_Zeta
}

func init() {
	proto.RegisterType((*InTxTracker)(nil), "zetachain.zetacore.crosschain.InTxTracker")
}

func init() {
	proto.RegisterFile("zetachain/zetacore/crosschain/in_tx_tracker.proto", fileDescriptor_468bf08d03bc41c1)
}

var fileDescriptor_468bf08d03bc41c1 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xac, 0x4a, 0x2d, 0x49,
	0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x07, 0xb3, 0xf2, 0x8b, 0x52, 0xf5, 0x93, 0x8b, 0xf2, 0x8b,
	0x8b, 0x21, 0x62, 0x99, 0x79, 0xf1, 0x25, 0x15, 0xf1, 0x25, 0x45, 0x89, 0xc9, 0xd9, 0xa9, 0x45,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xb2, 0x70, 0x2d, 0x7a, 0x30, 0x2d, 0x7a, 0x08, 0x2d,
	0x52, 0x6a, 0x58, 0x4c, 0x2c, 0xc8, 0x4e, 0xd7, 0x4f, 0xce, 0xcf, 0xcc, 0x03, 0x13, 0x10, 0x63,
	0x94, 0x5a, 0x19, 0xb9, 0xb8, 0x3d, 0xf3, 0x42, 0x2a, 0x42, 0x20, 0x86, 0x0b, 0x49, 0x72, 0x71,
	0x80, 0x75, 0xc5, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xb1, 0x83, 0xf9, 0x9e,
	0x29, 0x42, 0xe2, 0x5c, 0xec, 0x25, 0x15, 0xf1, 0x19, 0x89, 0xc5, 0x19, 0x12, 0x4c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x6c, 0x25, 0x15, 0x1e, 0x89, 0xc5, 0x19, 0x42, 0x4e, 0x5c, 0x9c, 0x20, 0x13,
	0xe3, 0x4b, 0x2a, 0x0b, 0x52, 0x25, 0x98, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x54, 0xf5, 0xb0, 0x38,
	0xaf, 0x20, 0x3b, 0x5d, 0x0f, 0x6c, 0xb5, 0x73, 0x7e, 0x66, 0x5e, 0x48, 0x65, 0x41, 0x6a, 0x10,
	0x47, 0x32, 0x94, 0xe5, 0xe4, 0x7d, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e,
	0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51,
	0x86, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0x60, 0xaf, 0xe8, 0xa2, 0xf9,
	0xaa, 0x02, 0x39, 0xa4, 0x40, 0x4e, 0x28, 0x4e, 0x62, 0x03, 0xfb, 0xcd, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x31, 0x4d, 0x0e, 0x02, 0x57, 0x01, 0x00, 0x00,
}

func (m *InTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoinType != 0 {
		i = encodeVarintInTxTracker(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintInTxTracker(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintInTxTracker(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInTxTracker(dAtA []byte, offset int, v uint64) int {
	offset -= sovInTxTracker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovInTxTracker(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovInTxTracker(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovInTxTracker(uint64(m.CoinType))
	}
	return n
}

func sovInTxTracker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInTxTracker(x uint64) (n int) {
	return sovInTxTracker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInTxTracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInTxTracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInTxTracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInTxTracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInTxTracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInTxTracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= coin.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInTxTracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInTxTracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInTxTracker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInTxTracker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInTxTracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInTxTracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInTxTracker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInTxTracker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInTxTracker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInTxTracker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInTxTracker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInTxTracker = fmt.Errorf("proto: unexpected end of group")
)
