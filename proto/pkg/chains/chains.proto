syntax = "proto3";
package chains;

import "gogoproto/gogo.proto";

option go_package = "github.com/zeta-chain/zetacore/pkg/chains";

enum ReceiveStatus {
  option (gogoproto.goproto_enum_stringer) = true;
  created = 0; // some observer sees inbound tx
  success = 1;
  failed = 2;
}

// ChainName represents the name of the chain
enum ChainName {
  option (gogoproto.goproto_enum_stringer) = true;
  empty = 0;

  eth_mainnet = 1;
  zeta_mainnet = 2;
  btc_mainnet = 3;
  polygon_mainnet = 4;
  bsc_mainnet = 5;
  goerli_testnet = 6;
  mumbai_testnet = 7;
  ganache_testnet = 8;
  baobab_testnet = 9;
  bsc_testnet = 10;
  zeta_testnet = 11;
  btc_testnet = 12;
  sepolia_testnet = 13;
  goerli_localnet = 14;
  btc_regtest = 15;
  amoy_testnet = 16;
}

// Network represents the network type of the chain
enum Network {
  option (gogoproto.goproto_enum_stringer) = true;
  eth = 0;
  zeta = 1;
  btc = 2;
  polygon = 3;
  bsc = 4;
}

// NetworkType represents the network type of the chain
enum NetworkType {
  option (gogoproto.goproto_enum_stringer) = true;
  mainnet = 0;
  testnet = 1;
  privnet = 2;
  devnet = 3;
}

// Vm represents the virtual machine type of the chain to support smart contracts
enum Vm {
  option (gogoproto.goproto_enum_stringer) = true;
  no_vm = 0;
  evm = 1;
}

// Consensus represents the consensus algorithm used by the chain
enum Consensus {
  option (gogoproto.goproto_enum_stringer) = true;
  ethereum = 0;
  tendermint = 1;
  bitcoin = 2;
}

//    Chain represents a blockchain network with its unique chain ID
//    ChainName is the name of the chain
//    ChainId is the unique identifier of the chain
//    Network is the network type of the chain , this can be ZETA, ETH, BSC, BTC, POLYGON
//    NetworkType is the network type of the chain, this can be MAINNET, TESTNET, DEVNET, PRIVNET
//    Vm is the virtual machine type of the chain to support smart contracts, this can be EVM, NO_VM
//    Consensus is the consensus algorithm used by the chain, this can be Tendermint, Ethereum, Bitcoin
//    IsExternal is a boolean value to determine if the chain is external to Zeta
//    IsHeaderSupported is a boolean value to determine if the chain supports headers

message Chain {
  ChainName chain_name = 1;
  int64 chain_id = 2;
  Network network = 3;
  NetworkType network_type = 4;
  Vm vm = 5;
  Consensus consensus = 6;
  bool is_external = 7;
  bool is_header_supported = 8;
}
