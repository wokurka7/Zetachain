syntax = "proto3";
package zetachain.zetacore.crosschain;

import "cosmos/base/query/v1beta1/pagination.proto";
import "crosschain/cross_chain_tx.proto";
import "crosschain/gas_price.proto";
import "crosschain/in_tx_hash_to_cctx.proto";
import "crosschain/in_tx_tracker.proto";
import "crosschain/last_block_height.proto";
import "crosschain/out_tx_tracker.proto";
import "crosschain/rate_limiter_flags.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/zeta-chain/zetacore/x/crosschain/types";

// Query defines the gRPC querier service.
service Query {
  // Queries a OutTxTracker by index.
  rpc OutTxTracker(QueryGetOutTxTrackerRequest) returns (QueryGetOutTxTrackerResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/outTxTracker/{chainID}/{nonce}";
  }

  // Queries a list of OutTxTracker items.
  rpc OutTxTrackerAll(QueryAllOutTxTrackerRequest) returns (QueryAllOutTxTrackerResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/outTxTracker";
  }

  rpc OutTxTrackerAllByChain(QueryAllOutTxTrackerByChainRequest) returns (QueryAllOutTxTrackerByChainResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/outTxTrackerByChain/{chain}";
  }

  rpc InTxTrackerAllByChain(QueryAllInTxTrackerByChainRequest) returns (QueryAllInTxTrackerByChainResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/inTxTrackerByChain/{chain_id}";
  }
  rpc InTxTrackerAll(QueryAllInTxTrackersRequest) returns (QueryAllInTxTrackersResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/inTxTrackers";
  }

  // Queries a InTxHashToCctx by index.
  rpc InTxHashToCctx(QueryGetInTxHashToCctxRequest) returns (QueryGetInTxHashToCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/inTxHashToCctx/{inTxHash}";
  }

  // Queries a InTxHashToCctx data by index.
  rpc InTxHashToCctxData(QueryInTxHashToCctxDataRequest) returns (QueryInTxHashToCctxDataResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/in_tx_hash_to_cctx_data/{inTxHash}";
  }

  // Queries a list of InTxHashToCctx items.
  rpc InTxHashToCctxAll(QueryAllInTxHashToCctxRequest) returns (QueryAllInTxHashToCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/inTxHashToCctx";
  }

  // Queries a gasPrice by index.
  rpc GasPrice(QueryGetGasPriceRequest) returns (QueryGetGasPriceResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/gasPrice/{index}";
  }

  // Queries a list of gasPrice items.
  rpc GasPriceAll(QueryAllGasPriceRequest) returns (QueryAllGasPriceResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/gasPrice";
  }

  rpc ConvertGasToZeta(QueryConvertGasToZetaRequest) returns (QueryConvertGasToZetaResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/convertGasToZeta";
  }

  rpc ProtocolFee(QueryMessagePassingProtocolFeeRequest) returns (QueryMessagePassingProtocolFeeResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/protocolFee";
  }

  // Queries a lastBlockHeight by index.
  rpc LastBlockHeight(QueryGetLastBlockHeightRequest) returns (QueryGetLastBlockHeightResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/lastBlockHeight/{index}";
  }

  // Queries a list of lastBlockHeight items.
  rpc LastBlockHeightAll(QueryAllLastBlockHeightRequest) returns (QueryAllLastBlockHeightResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/lastBlockHeight";
  }
  // Queries a send by index.
  rpc Cctx(QueryGetCctxRequest) returns (QueryGetCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/cctx/{index}";
  }

  // Queries a send by nonce.
  rpc CctxByNonce(QueryGetCctxByNonceRequest) returns (QueryGetCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/cctx/{chainID}/{nonce}";
  }

  // Queries a list of send items.
  rpc CctxAll(QueryAllCctxRequest) returns (QueryAllCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/cctx";
  }

  // Queries a list of pending cctxs.
  rpc ListPendingCctx(QueryListPendingCctxRequest) returns (QueryListPendingCctxResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/pendingCctx";
  }

  // Queries a list of pending cctxs within rate limit.
  rpc ListPendingCctxWithinRateLimit(QueryListPendingCctxWithinRateLimitRequest) returns (QueryListPendingCctxWithinRateLimitResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/pendingCctxWithinRateLimit";
  }

  rpc ZetaAccounting(QueryZetaAccountingRequest) returns (QueryZetaAccountingResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/zetaAccounting";
  }

  // Queries a list of lastMetaHeight items.
  rpc LastZetaHeight(QueryLastZetaHeightRequest) returns (QueryLastZetaHeightResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/lastZetaHeight";
  }

  // Queries the rate limiter flags
  rpc RateLimiterFlags(QueryRateLimiterFlagsRequest) returns (QueryRateLimiterFlagsResponse) {
    option (google.api.http).get = "/zeta-chain/crosschain/rateLimiterFlags";
  }
}

message QueryZetaAccountingRequest {}

message QueryZetaAccountingResponse {
  string aborted_zeta_amount = 1;
}

message QueryGetOutTxTrackerRequest {
  int64 chainID = 1;
  uint64 nonce = 2;
}

message QueryGetOutTxTrackerResponse {
  OutTxTracker outTxTracker = 1 [(gogoproto.nullable) = false];
}

message QueryAllOutTxTrackerRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllOutTxTrackerResponse {
  repeated OutTxTracker outTxTracker = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllOutTxTrackerByChainRequest {
  int64 chain = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllOutTxTrackerByChainResponse {
  repeated OutTxTracker outTxTracker = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllInTxTrackerByChainRequest {
  int64 chain_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllInTxTrackerByChainResponse {
  repeated InTxTracker inTxTracker = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllInTxTrackersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInTxTrackersResponse {
  repeated InTxTracker inTxTracker = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetInTxHashToCctxRequest {
  string inTxHash = 1;
}

message QueryGetInTxHashToCctxResponse {
  InTxHashToCctx inTxHashToCctx = 1 [(gogoproto.nullable) = false];
}

message QueryInTxHashToCctxDataRequest {
  string inTxHash = 1;
}

message QueryInTxHashToCctxDataResponse {
  repeated CrossChainTx CrossChainTxs = 1 [(gogoproto.nullable) = false];
}

message QueryAllInTxHashToCctxRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllInTxHashToCctxResponse {
  repeated InTxHashToCctx inTxHashToCctx = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetGasPriceRequest {
  string index = 1;
}

message QueryGetGasPriceResponse {
  GasPrice GasPrice = 1;
}

message QueryAllGasPriceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGasPriceResponse {
  repeated GasPrice GasPrice = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetLastBlockHeightRequest {
  string index = 1;
}

message QueryGetLastBlockHeightResponse {
  LastBlockHeight LastBlockHeight = 1;
}

message QueryAllLastBlockHeightRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllLastBlockHeightResponse {
  repeated LastBlockHeight LastBlockHeight = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCctxRequest {
  string index = 1;
}

message QueryGetCctxByNonceRequest {
  int64 chainID = 1;
  uint64 nonce = 2;
}

message QueryGetCctxResponse {
  CrossChainTx CrossChainTx = 1;
}

message QueryAllCctxRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCctxResponse {
  repeated CrossChainTx CrossChainTx = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryListPendingCctxRequest {
  int64 chain_id = 1;
  uint32 limit = 2;
}

message QueryListPendingCctxResponse {
  repeated CrossChainTx CrossChainTx = 1;
  uint64 totalPending = 2;
}

message QueryListPendingCctxWithinRateLimitRequest {
  uint32 limit = 1;
}

message QueryListPendingCctxWithinRateLimitResponse {
  repeated CrossChainTx cross_chain_tx = 1;
  uint64 total_pending = 2;
  int64 current_withdraw_window = 3;
  string current_withdraw_rate = 4;
  bool rate_limit_exceeded = 5;
}

message QueryLastZetaHeightRequest {}

message QueryLastZetaHeightResponse {
  int64 Height = 1;
}

message QueryConvertGasToZetaRequest {
  int64 chainId = 1;
  string gasLimit = 2;
}

message QueryConvertGasToZetaResponse {
  string outboundGasInZeta = 1;
  string protocolFeeInZeta = 2;
  uint64 ZetaBlockHeight = 3;
}

message QueryMessagePassingProtocolFeeRequest {}

message QueryMessagePassingProtocolFeeResponse {
  string feeInZeta = 1;
}

message QueryRateLimiterFlagsRequest {}

message QueryRateLimiterFlagsResponse {
  RateLimiterFlags rateLimiterFlags = 1 [(gogoproto.nullable) = false];
}
